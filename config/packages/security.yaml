security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: #te permite entrar por usuario o por email gracias a una consulta personalizada en UserRepository.php
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            provider: app_user_provider
            lazy: true
            form_login: 
                login_path: login
                check_path: login

            logout: 
                path: logout
                target: /login
                
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # ROLES NECESARIOS PARA PODER ENTRAR
        - { path: ^/home, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/account, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/search, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/follow, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/unfollow, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/juego, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/people, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/privateMessage, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/notification, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/profile, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/followed, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/following, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/likesAction, roles: [ROLE_USER, ROLE_ADMIN] }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
